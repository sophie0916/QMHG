path.expand("~")
dir()
print("hullo")
getwd()
library(rmarkdown)
library("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
getwd()
z <- (0:100)/100
plot(x = z, y = 2^z, type = "l")
z
floor(funif(n=3, min=1, max=7))
plot(x = z, y = 2^z, type = "l")
plot(x = z, y = 3^z, type = "l")
lines(x = z, y = 3^z, type = "l")
lines(x = z, y = 4^z, type = "l", lty = 2)
legend(x = "bottomright", legend = c("function won", "function too"), lty = c(1,2))
z <- (0:100)/100
plot(x = z, y = z*100, type = "l")
```
- Calculate Mapping Distance by the Haldane Mapping Function
```{r}
z <- (0:100)/100
lines(x = z, y = z*100, type = "l", lty = 2)
```
- Legends specifying which line type corresponds to which function
```{r}
legend(x = "bottomright", legend = c("Morgan", "Haldane"), lty = c(1,2))
recfrac <- (0:100)/100
plot(x = recfrac*100, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
setwd("Documents/2016_Spring/Quantitative Methods in Human Genetics/week04/")
gameteTable <- read.table("listOfGametes")
gameteTable
head(gameteTable)
gameteTable(,"GemeTriplet1")
gameteTable[,"GeneTriplet1"]
gameteTable[]["GeneTriplet1"]
gameteTable[gameteTable$V2 == "GeneTriplet1"]
gameteTable$V2 == "GeneTriplet3"
gameteTable[gameteTable$V == "GeneTriplet3"]
table(subset(gameteTable, V2 == "GeneTriplet3")$V1)
table(subset(gameteTable, V2 == "GeneTriplet3"))
recfrac <- (0:100)/100
plot(x = recfrac*100, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
lines(x = recfrac*100, y = 0.5* (1 - e^(-x)), type = "l", lty = 2)
e
lines(x = recfrac*100, y = 0.5* (1 - 2.71828^(-x)), type = "l", lty = 2)
lines(x = recfrac*100, y = recfrac*100*0.5* (1 - 2.71828^(-x)), type = "l", lty = 2)
lines(x = recfrac*100, y = 0.5* (1 - 2.71828^(-recfrac*100)), type = "l", lty = 2)
recfrac <- (0:50)/100
plot(x = recfrac*100, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
lines(x = recfrac*100, y = 0.5* (1 - 2.71828^(-0.5cM)), type = "l", lty = 2)
recfrac <- (0:50)/100
cM <- recfrac * 100
plot(x = cM, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
```
- Calculate Mapping Distance by the Haldane Mapping Function
```{r}
lines(x = recfrac*100, y = 0.5* (1 - 2.71828^(-0.5cM)), type = "l", lty = 2)
recfrac <- (0:50)/100
cM <- recfrac * 100
recfrac <- (0:50)/100
cM <- recfrac*100
lines(x = recfrac*100, y = 0.5* (1 - 2.71828^(-0.5*cM)), type = "l", lty = 2)
lines(x = cM, y = 0.5* (1 - 2.71828^(-cM)), type = "l", lty = 2)
lines(x = cM, y = 0.5* (1 - 2.71828^(-2cM)), type = "l", lty = 2)
lines(x = cM, y = 0.5* (1 - 2.71828^(-2*cM)), type = "l", lty = 2)
lines(x = cM, y = 0.5* (1 - 2.71828^(-50*cM)), type = "l", lty = 2)
recfrac <- (0:50)/100
cM <- recfrac * 100
plot(x = cM, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
lines(x = cM, y = 0.5* (1 - 2.71828^(-50*cM)), type = "l", lty = 2)
lines(x = cM, y = 0.5* (1 - 2.71828^(-2*recfrac)), type = "l", lty = 2)
plot(x = cM, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
lines(x = cM, y = 0.5* (1 - 2.71828^(-2*recfrac)), type = "l", lty = 2)
listG$V2 == "GeneTriplet3"
listG <- read.table("listOfGametes")
listG$V2 == "GeneTriplet3"
subset(listG, V2 == "GeneTriplet3")
head(subset(listG, V2 == "GeneTriplet3")$V1)
subset(listG, V2 == "GeneTriplet3")$V1
table(subset(listG, V2 == "GeneTriplet3")$V1)
gameteTable <- read.table("listOfGametes")
table(subset(gameteTable, V2 == "GeneTriplet3")$V1)
table(subset(gameteTable, V2 == "GeneTriplet1")$V1)
table(subset(gameteTable, V2 == "GeneTriplet2")$V1)
table(subset(gameteTable, V2 == "GeneTriplet3")$V1)
table(subset(gameteTable, V2 == "GeneTriplet4")$V1)
(table(subset(gameteTable, V2 == "GeneTriplet4")$V1))$Allele1_Allele2_Allele1
render("Assignment04_SophieYeonSooKim.Rmd")
plot(x = cM, y = recfrac, xlab = "Mapping Distance", ylab = "Recombination Fractions", main = "Recombination Fractions Against Mapping Distance", type = "l")
lines(x = cM, y = 0.5* (1 - 2.71828^(-2*recfrac)), type = "l", lty = 2)
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
cMap <- read.table("gamete_genotyping_project.txt")
cMap
cMap <- read.table("gamete_genotyping_project.txt", header = T)
cMap
subset(cMap, V1 == 1)
subset(cMap, individual_id == 1)
1. Individual 1
1. Individual 1
subset(cMap, individual_id == 4)
subset(cMap, individual_id == 5)
?"table"
?read.table
cMap[,"gamete_count"]
sum(cMap[,"gamete_count" == 1])
cMap[,"gamete_count" == 1]
cMap[,cMap$gamete_count == 1]
cMap[,cMap$gamete_count]
cMap$gamete_count
sum(cMap$gamete_count)
sum(cMap$gamete_count == 1)
sum(cMap$individual_id == 1)
cMap$individual_id==1
cMap[cMap$individual_id==1, cMap$gamete_count]
render("Assignment04_SophieYeonSooKim.Rmd")
data1 <- subset(cMap, individual_id == 1)
data1
data1[,3]
data1(data1$gamete_count)
data1$gamete_count
sum(data1$gamete_count)
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
plot(x = c(0,1), y = c(1,1), type = "l")
text(x = 0.2, y = 1.1, labels = "A")
text(x = 0.5, y = 1.1, labels = "B")
text(x = 0.8, y = 1.1, labels = "C")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
sum1
sum2
sum3
sum4
sum5
render("Assignment04_SophieYeonSooKim.Rmd")
s_e <- 18+20+5+4
#1: Calculating probabilities aka P series
p_series <- c(1:24)
for (i in 1:24)
{p_series[i]<-(1/4)^i*(3/4)^(24-i)}
#2: Calculating binomail coefficients
BC<- c(1:24)
for(i in 1:24){BC[i]<-factorial(24)/(factorial(i)*factorial(24-i))}
#3: Calculating exact probabilites
exact <- c(1:24)
for(i in 1:24)
{exact[i]<-
p_series[i]*BC[i]}
#4: Storing calculations as data.frame
data.frame(PSeries = p_series,
BCo = BC,
ExP = exact)
#5: Using the plot function
plot(1:24, exact,
main="Poisson Distribution of Affected Children",
xlab="Affected Child Number",
ylab="Probability")
#6: Check through dbinom
dbinom(x=2, size=24, prob=(1/4))
#results match dbinom check of 0.03077067
dlist <- c(1:24)
for(i in 1:24){p_series[i]}
#7: Calculating 'none affected' probability
((3/4)*(1/2))^8 #0.0003910661
# 3/4 for not inheriting A disease
# 1/2 for not inheriting B disease (both males and females)
# 8 total children
#8: Calculating probability of affected with A and B diseases
((1/4*(1/2))^8) #5.960464e-08
#1/4 for inheriting A disease
#1/2 for inheriting B disease for both males and females
# 8 total children
#9: Probability of 4 children with A and B
(factorial(8)/(factorial(8-4))*((3/4*1/2)^4)*((1/4*1/2)^4))
#0.00811
#10: Most probable outcome probability
# male and female: disease A present is 1/4....disease A not present is 3/4
# male and female: disease B present is 1/2....disease B not present is 1/2
maleA <-c(3/4,1/4)
maleB <- c(1/2,1/2)
male <- maleA %*% t(maleB)
colnames(male) <- c("A", "Aabsent")
rownames(male) <-c("B", "Babsent")
femaleA <-c(3/4,1/4)
femaleB <- c(1/2,1/2)
female <- femaleA %*% t(femaleB)
colnames(female) <- c("A", "Aabsent")
rownames(female) <-c("B", "Babsent")
#11: Calculating map unit distance btwn genes
#individual 1:
total1<- 50+60+20+30+10+7+2+1
#180
s_n <- (20+30+2+1)
(s_n)/(total1) #=75.71 cM #distance between s & n
n_g <- (10+7+2+1)
(n_g)/(total1) #= 28.57cM #distance between n & g
#individual 2:
total2 <- 50+60+5+4+2+1+1+0  #123
g_j <- (2+1+1+0)
(g_j)/(total2) #= 3.25 cM #distance between g & j
n_j <- (5+4+1)
(n_j)/(total2) #= 8.13 cM #distance between n & j
#individual 3:
total3 <- 47+45+8+6+4+3+0+1 #114
n_e <- (8+6+1)
(n_e)/(total3) #= 13.16 cM #distance between n & e
e_i <- (4+3+1)
(e_i)/(total3) #= 7.02 cM #distance between e & i
#individual 4:
total4 <- 93+89+5+6+2+3+1+0 #199
c_i <- (2+3+1)
(c_i)/(total4) #=3.02 cM distance between c & i
s_c <- (5+6+1)
(s_c)/(total4) #=6.03 cM #distance between s & c
#individual 5:
total5 <- 96+92+28+25+18+20+5+4 #288
s_e <- 18+20+5+4
e_j <- 28+25+5+4
#12: Genetic map along a chromosome
S-6-C-3-I-7-E-13-N-8-J-3G
dev.off()
#1: Calculating probabilities aka P series
p_series <- c(1:24)
for (i in 1:24)
{p_series[i]<-(1/4)^i*(3/4)^(24-i)}
#2: Calculating binomail coefficients
BC<- c(1:24)
for(i in 1:24){BC[i]<-factorial(24)/(factorial(i)*factorial(24-i))}
#3: Calculating exact probabilites
exact <- c(1:24)
for(i in 1:24)
{exact[i]<-
p_series[i]*BC[i]}
#4: Storing calculations as data.frame
data.frame(PSeries = p_series,
BCo = BC,
ExP = exact)
#5: Using the plot function
plot(1:24, exact,
main="Poisson Distribution of Affected Children",
xlab="Affected Child Number",
ylab="Probability")
#6: Check through dbinom
dbinom(x=2, size=24, prob=(1/4))
#results match dbinom check of 0.03077067
dlist <- c(1:24)
for(i in 1:24){p_series[i]}
#7: Calculating 'none affected' probability
((3/4)*(1/2))^8 #0.0003910661
# 3/4 for not inheriting A disease
# 1/2 for not inheriting B disease (both males and females)
# 8 total children
#8: Calculating probability of affected with A and B diseases
((1/4*(1/2))^8) #5.960464e-08
#1/4 for inheriting A disease
#1/2 for inheriting B disease for both males and females
# 8 total children
#9: Probability of 4 children with A and B
(factorial(8)/(factorial(8-4))*((3/4*1/2)^4)*((1/4*1/2)^4))
#0.00811
#10: Most probable outcome probability
# male and female: disease A present is 1/4....disease A not present is 3/4
# male and female: disease B present is 1/2....disease B not present is 1/2
maleA <-c(3/4,1/4)
maleB <- c(1/2,1/2)
male <- maleA %*% t(maleB)
colnames(male) <- c("A", "Aabsent")
rownames(male) <-c("B", "Babsent")
femaleA <-c(3/4,1/4)
femaleB <- c(1/2,1/2)
female <- femaleA %*% t(femaleB)
colnames(female) <- c("A", "Aabsent")
rownames(female) <-c("B", "Babsent")
#11: Calculating map unit distance btwn genes
#individual 1:
total1<- 50+60+20+30+10+7+2+1
#180
s_n <- (20+30+2+1)
(s_n)/(total1) #=75.71 cM #distance between s & n
n_g <- (10+7+2+1)
(n_g)/(total1) #= 28.57cM #distance between n & g
#individual 2:
total2 <- 50+60+5+4+2+1+1+0  #123
g_j <- (2+1+1+0)
(g_j)/(total2) #= 3.25 cM #distance between g & j
n_j <- (5+4+1)
(n_j)/(total2) #= 8.13 cM #distance between n & j
#individual 3:
total3 <- 47+45+8+6+4+3+0+1 #114
n_e <- (8+6+1)
(n_e)/(total3) #= 13.16 cM #distance between n & e
e_i <- (4+3+1)
(e_i)/(total3) #= 7.02 cM #distance between e & i
#individual 4:
total4 <- 93+89+5+6+2+3+1+0 #199
c_i <- (2+3+1)
(c_i)/(total4) #=3.02 cM distance between c & i
s_c <- (5+6+1)
(s_c)/(total4) #=6.03 cM #distance between s & c
#individual 5:
total5 <- 96+92+28+25+18+20+5+4 #288
s_e <- 18+20+5+4
e_j <- 28+25+5+4
#12: Genetic map along a chromosome
#S-6-C-3-I-7-E-13-N-8-J-3G
dev.off()
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
render("Assignment04_SophieYeonSooKim.Rmd")
