}
ef2
N1 <- 10
tN <- 2*N1
ef1 <- 1/tN
for (i in 1:200) {
ef1[i+1] <- 1/tN + (1-1/tN)*ef1[i]
}
ef1
N2 <- 50
tN <- 2*N2
ef2 <- 1/tN
for (i in 1:200) {
ef2[i+1] <- 1/tN + (1-1/tN)*ef2[i]
}
ef2
N3 <- 100
tN <- 2*N3
ef3 <- 1/tN
for (i in 1:200) {
ef3[i+1] <- 1/tN + (1-1/tN)*ef3[i]
}
ef3
N4 <- 500
tN <- 2*N4
ef4 <- 1/tN
for (i in 1:200) {
ef4[i+1] <- 1/tN + (1-1/tN)*ef4[i]
}
ef4
plot(1:201, ef1, type = "l")
points(1:201, ef2, type = "l")
points(1:201, ef3, type = "l")
points(1:201, ef4, type = "l")
plot(1:201, ef1, type = "l", col="red")
points(1:201, ef2, type = "l", col="yellow")
points(1:201, ef3, type = "l", col="green")
points(1:201, ef4, type = "l", col="blue")
pedDF <- data.frame(
id = c("Levi", "Leona", "Rosalynne", "Ben", "Leroy", "Gina", "Jacklyn", "Matt", "Amy", "Austin", "Floyd"),
dadid = c(NA, NA, "Levi", "Levi", "Ben", "Ben", "Leroy", "Leroy", "Matt", "Matt", "Austin"),
momid = c(NA, NA, "Leona", "Leona", "Rosalynne", "Rosalynne", "Gina", "Gina", "Jacklyn", "Jacklyn", "Amy"),
sex = c("male", "female", "female", "male", "male", "female", "female", "male", "female", "male", "male")
)
pedigreeObject <- with(pedDF, pedigree(id,dadid,momid,sex))
plot(pedigreeObject)
library(kinship2)
library(Matrix)
library(quadprog)
library(kinship2)
pedDF <- data.frame(
id = c("Levi", "Leona", "Rosalynne", "Ben", "Leroy", "Gina", "Jacklyn", "Matt", "Amy", "Austin", "Floyd"),
dadid = c(NA, NA, "Levi", "Levi", "Ben", "Ben", "Leroy", "Leroy", "Matt", "Matt", "Austin"),
momid = c(NA, NA, "Leona", "Leona", "Rosalynne", "Rosalynne", "Gina", "Gina", "Jacklyn", "Jacklyn", "Amy"),
sex = c("male", "female", "female", "male", "male", "female", "female", "male", "female", "male", "male")
)
pedigreeObject <- with(pedDF, pedigree(id,dadid,momid,sex))
plot(pedigreeObject)
pedDF <- data.frame(
id = c("Levi", "Leona", "Rosalynne", "Ben", "Jacklyn", "Matt", "Amy", "Austin", "Floyd"),
dadid = c(NA, NA, "Levi", "Levi", "Ben", "Ben", "Matt", "Matt", "Austin"),
momid = c(NA, NA, "Leona", "Leona", "Rosalynne", "Rosalynne", "Jacklyn", "Jacklyn", "Amy"),
sex = c("male", "female", "female", "male", "female", "male", "female", "male", "male")
)
pedigreeObject <- with(pedDF, pedigree(id,dadid,momid,sex))
plot(pedigreeObject)
F_ln <- 0
F_lv <- 0
F_j <- (1/2)^3*(2+F_lv) + (1/2)^3*(2+F_ln)
F_m <- (1/2)^3*(2+F_lv) + (1/2)^3*(2+F_ln)
F_f <- (1/2)^3*(2+F_m) + (1/2)^3*(2+F_j)
F_f
F_ln <- 0
F_lv <- 0
F_j <- (1/2)^3*(1+F_lv) + (1/2)^3*(1+F_ln)
F_m <- (1/2)^3*(1+F_lv) + (1/2)^3*(1+F_ln)
F_f <- (1/2)^3*(1+F_m) + (1/2)^3*(1+F_j)
F_f
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/Assignment05_SophieYeonSooKim.Rmd")
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
N1 <- 10
tN <- 2*N1
ef1 <- 1/tN
for (i in 1:200) {
ef1[i+1] <- 1/tN + (1-1/tN)*ef1[i]
}
N2 <- 50
tN <- 2*N2
ef2 <- 1/tN
for (i in 1:200) {
ef2[i+1] <- 1/tN + (1-1/tN)*ef2[i]
}
N3 <- 100
tN <- 2*N3
ef3 <- 1/tN
for (i in 1:200) {
ef3[i+1] <- 1/tN + (1-1/tN)*ef3[i]
}
N4 <- 500
tN <- 2*N4
ef4 <- 1/tN
for (i in 1:200) {
ef4[i+1] <- 1/tN + (1-1/tN)*ef4[i]
}
plot(1:201, ef1, type = "l", col="red")
points(1:201, ef2, type = "l", col="yellow")
points(1:201, ef3, type = "l", col="green")
points(1:201, ef4, type = "l", col="blue")
legend("topright", c("N = 10","N = 50", "N = 100", "N = 500"), pch = c(1, 2, 3, 4), col = c("red", "yellow", "green", "blue"))
legend("topright", c("N = 10","N = 50", "N = 100", "N = 500"), pch = c(16, 19, 19, 16 ), col = c("red", "yellow", "green", "blue"))
legend("topright", c("N = 10","N = 50", "N = 100", "N = 500"), pch = c(20, 20, 20, 20), col = c("red", "yellow", "green", "blue"))
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
n <- 17 + 55 + 12
AA <- 17/n
AG <- 55/n
GG <- 12/n
p <- AA + 0.5*AG
q <- GG + 0.5*AG
HWE <- p^2 + 2*p*q + q^2
HWE
p
q
p^2
obs1 <- c(17, 55, 12)/n
exp1 <- c(0.2809, 0.4982, 0.2209)*n
chi1 <- c()
for(i in 1:3){
chi1[i] <- (obs1[i] - exp1[i]^2) / (exp1[i])
}
sum(chi1)
o1 <- c(17,55,12)
e1 <- c(0.2809*84,0.4982*84,0.2209*84)
chisquare1 <- c()
for(i in 1:3){chisquare1[i] <- (o1[i]-e1[i]^2)/(e1[i])}
sum(chisquare1)
(17/84)^2
17^2/84
q^2
2*p*q
sqrt(17/84)
17/84
obs1 <- c(17, 55, 12)/n
exp1 <- c(0.2809, 0.4982, 0.2209)*n
chi1 <- c()
for(i in 1:3){
chi1[i] <- (obs1[i] - exp1[i]^2) / (exp1[i])
}
sum(chi1) #chi-square=8.30, degrees of freedom=1
1-pchisq(8.30,df=1)
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
o2 <- c(44,13,0)
e2 <- c(44.74,11.51,0.74)
chisquare2 <- c()
for(i in 1:3){chisquare2[i] <- (o2[i]-e2[i]^2)/(e2[i])}
sum(chisquare2) #chi=0.945, df=1
1-pchisq(0.945,df=1) #pvalue=0.33, h-null cannot be rejected
# h-null= there is no relationship between A and T of the Hb gene
o1 <- c(17,55,12)
e1 <- c(0.2809*84,0.4982*84,0.2209*84)
chisquare1 <- c()
for(i in 1:3){chisquare1[i] <- (o1[i]-e1[i]^2)/(e1[i])}
sum(chisquare1) #chi-square=8.30, degrees of freedom=1
1-pchisq(8.30,df=1)
sum1
sum(chisquare1)
1-pchisq(8.3, df = 1)
```
Since pvalue < 0.05, reject the null hypothesis.
1-pchisq(8.3, df = 1)
sum2 <- sum(chi2)
sum2
render("Documents/2016_Spring/Quantitative Methods in Human Genetics/week06/Assignment06_SophieYeonSooKim.Rmd")
?rbinom
rdist <- rpois(c(1:500), 5000, replace=T)
rdist <- rpois(c(1:500), 5000)
hist(rdist)
shapiro.test(rdist)
?rpois
rdist <- rpois(5000, 5000)
hist(rdist)
zee <- c()
for (i in 1:5000) {
zee[i] <- (rdist[i]-mean(rdist))/sd(rdist)
}
shapiro.test(rdist)
?rchisq
rdist <- rchisq(5000, 5)
hist(rdist)
zee <- c()
for (i in 1:5000) {
zee[i] <- (rdist[i]-mean(rdist))/sd(rdist)
}
shapiro.test(rdist)
meandist <- c()
for (i in 1:5000) {
meandist[i] <-mean(sample(rdist, 100, replace = T))
}
hist(meandist)
shapiro.test(meandist)
qqplot(rdist, meandist)
setwd("Documents/2016_Spring/Quantitative Methods in Human Genetics/week08/")
render("Assignment08_SophieYeonSooKim.Rmd")
lactase <- read.csv("lactase_haplotypes.txt", header = T)
lactase
lactase <- read.csv("lactase_haplotypes.txt", header = T)
lactase
lactase <- read.table("lactase_haplotypes.txt", header = T)
lactase
1 - sum((aggregate(N~SNP1, lactase, sum)$N / 106)^2)
aggregate(N~SNP1, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A1 <- 70/106
CTT <- 73/106
aggregate(N~SNP1:C.T.13910, lactase, sum)
A1CTT <- 50/106
result1 <- A1CTT - A1 * CTT
result1
aggregate(N~SNP2, lactase, sum)
aggregate(N~SNP2:C.T.13910, lactase, sum)
aggregate(N~SNP3, lactase, sum)
aggregate(N~SNP3:C.T.13910, lactase, sum)
aggregate(N~SNP3:C.T.13910, lactase, sum)
aggregate(N~SNP4, lactase, sum)
aggregate(N~SNP4:C.T.13910, lactase, sum)
aggregate(N~SNP5, lactase, sum)
aggregate(N~SNP5:C.T.13910, lactase, sum)
aggregate(N~SNP6, lactase, sum)
aggregate(N~SNP6:C.T.13910, lactase, sum)
aggregate(N~SNP3, lactase, sum)
aggregate(N~SNP3:C.T.13910, lactase, sum)
aggregate(N~SNP4, lactase, sum)
aggregate(N~SNP5, lactase, sum)
aggregate(N~SNP5:C.T.13910, lactase, sum)
aggregate(N~SNP6, lactase, sum)
aggregate(N~SNP6:C.T.13910, lactase, sum)
aggregate(N~SNP1, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A1 <- 70/106
CTT <- 73/106
aggregate(N~SNP1:C.T.13910, lactase, sum)
A1CTT <- 50/106
result1 <- A1CTT - A1 * CTT
aggregate(N~SNP2, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A2 <- 72/106
CTT <- 73/106
aggregate(N~SNP2:C.T.13910, lactase, sum)
A2CTT <- 64/106
result2 <- A2CTT - A2 * CTT
aggregate(N~SNP3, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A3 <- 73/106
CTT <- 73/106
aggregate(N~SNP3:C.T.13910, lactase, sum)
A3CTT <- 73/106
result3 <- A3CTT - A3 * CTT
aggregate(N~SNP4, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A4 <- 73/106
CTT <- 73/106
aggregate(N~SNP4:C.T.13910, lactase, sum)
A4CTT <- 73/106
result4 <- A4CTT - A4 * CTT
aggregate(N~SNP5, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A5 <- 80/106
CTT <- 73/106
aggregate(N~SNP5:C.T.13910, lactase, sum)
A5CTT <- 64/106
result5 <- A5CTT - A5 * CTT
aggregate(N~SNP6, lactase, sum)
aggregate(N~C.T.13910, lactase, sum)
A6 <- 69/106
CTT <- 73/106
aggregate(N~SNP6:C.T.13910, lactase, sum)
A6CTT <- 41/106
result6 <- A6CTT - A6 * CTT
dV <- c(result1, result2, result3, result4, result5, result6)
plot(dV)
seq <- read.table("SequenceData.txt")
head(seq)
seq <- read.table("SequenceData.txt", quote = "\"")
head(seq)
table(seq)
length(table(seq))
sequence <-read.table("SequenceData.txt", quote="\"")
sequence[,"V1"] #38 unique haplotypes
seq1
seq1 <- t(apply(seq, 1, function(x) {
unlist(strsplit(x, ""))
}))
seq2 <- data.frame(seq1)
seq3 <- apply(seq2, 2, function(x) {
length(table(x))
})
seq3
seq1
seq1[1]
seq1[1][1]
seq1[,1]
seq1[,1] == "A"
length(seq1[,1] == "A")
table(seq1[,1] == "A")
table(seq1[,1] == "A") + table(seq1[,1] == "C")
seq[,1]
seq1[,1]
seq1[1,1]
seq1[96,1]
a = 0
t = 0
c = 0
g = 0
for (i in 1:100) {
if (seq1[i, 1] == "A") {
a = a + 1
}
if (seq1[i, 1] == "T") {
t = t + 1
}
if (seq1[i, 1] == "C") {
c = c + 1
}
if (seq1[i, 1] == "G") {
g = g + 1
}
}
result = 1 - ((a/100)^2 + (t/100)^2 + (c/100)^2 + (g/100)^2)
result
final <- c()
for (k in 1:50) {
a = 0
t = 0
c = 0
g = 0
for (i in 1:100) {
if (seq1[i, k] == "A") {
a = a + 1
}
if (seq1[i, k] == "T") {
t = t + 1
}
if (seq1[i, k] == "C") {
c = c + 1
}
if (seq1[i, k] == "G") {
g = g + 1
}
}
c[k] <- result = 1 - ((a/100)^2 + (t/100)^2 + (c/100)^2 + (g/100)^2)
}
final
final <- c()
for (k in 1:50) {
a = 0
t = 0
c = 0
g = 0
for (i in 1:100) {
if (seq1[i, k] == "A") {
a = a + 1
}
if (seq1[i, k] == "T") {
t = t + 1
}
if (seq1[i, k] == "C") {
c = c + 1
}
if (seq1[i, k] == "G") {
g = g + 1
}
}
c[k] <- (result = 1 - ((a/100)^2 + (t/100)^2 + (c/100)^2 + (g/100)^2))
}
final
final <- c()
for (k in 1:50) {
a = 0
t = 0
c = 0
g = 0
for (i in 1:100) {
if (seq1[i, k] == "A") {
a = a + 1
}
if (seq1[i, k] == "T") {
t = t + 1
}
if (seq1[i, k] == "C") {
c = c + 1
}
if (seq1[i, k] == "G") {
g = g + 1
}
}
result = 1 - ((a/100)^2 + (t/100)^2 + (c/100)^2 + (g/100)^2)
c[k] <- result
}
final
final <- c()
for (k in 1:50) {
a = 0
t = 0
c = 0
g = 0
for (i in 1:100) {
if (seq1[i, k] == "A") {
a = a + 1
}
if (seq1[i, k] == "T") {
t = t + 1
}
if (seq1[i, k] == "C") {
c = c + 1
}
if (seq1[i, k] == "G") {
g = g + 1
}
}
result = 1 - ((a/100)^2 + (t/100)^2 + (c/100)^2 + (g/100)^2)
final[k] <- result
}
final
seqseg <- as.character(unlist(sequence))
seqseg2 <- c()
for(i in 1:100){seqseg2[i] <- strsplit(x=seqseg[i], split="")}
data1<- data.frame(seqseg2)
colnames(data1) <- c(1:100)
data1 <- t(data1)
colnames (data1) <- c(1:50)
sites <- c()
for(i in 1:50){
firstdata <- data1[,i][1]
poly <- T # initially it is TRUE
for(j in 1:100){
if(data1[,i][j] != firstdata){poly <- F}
}
sites[i] <- poly
}
sites
polysite <- c()
for(i in 1:50){
if(sites[i] ==T){polysite[i]<-i}
}
polysite
# 13,15,16,21-29, 36, 38 not polymorphic
# site of all others from 1-37 polymorphic
#15. Calculating genetic diversity for each nucleotide position
calcGD <- c()
for(i in 1:100){
compared <- seqseg[i]
count <- 0
for(j in 1:100){
if(seqseg[j]==compared){count <- count+1}
}
calcGD[i] <- count
}
calcGD
uniqueh <- seqseg
for(i in 1:100){
compare <- seqseg[i]
if(i == 100){break}
for(j in (i+1):100){
if(seqseg[j]==compare){
uniqueh [j] <- "NA"
}}}
uniqueh
sequence <- c()
frequency <- c()
num <- 1
for(i in 1:100){
if(uniqueh[i]!="NA"){
sequence[num] <- uniqueh[i]
frequency[num] <- calcGD[i]
num <- num + 1
}
}
final <- matrix(c(sequence,frequency),ncol=2)
final
sequence <- as.character(unlist(sequence))
sndseq <- c()
for(i in 1:38){sndseq[i] <- strsplit(x=sequence[i],split="")}
final_frame <- data.frame(sndseq)
colnames(final_frame) <- c(1:38)
final_frame <- t(final_frame)
colnames(final_frame) <- c(1:50)
gdiversity <- function (list,freq_list){
listf <- c(0,0,0,0) # list frequency
for(i in 1:38){
if(list[i] == "A"){listf[1] <- listf[1]+freq_list[i]}
if(list[i] == "C"){listf[2] <- listf[2]+freq_list[i]}
if(list[i] == "G"){listf[3] <- listf[3]+freq_list[i]}
if(list[i] == "T"){listf[4] <- listf[4]+freq_list[i]}
}
gdiversity <- c()
for(i in 1:4){ gdiversity[i] <- listf [i]/sum(freq_list)}
gdiversitysq <- c()
for(i in 1:4){gdiversitysq[i] <- gdiversity[i]^2}
genevariation <- 1 - sum(gdiversitysq) # calculating gene variation
return(genevariation)
}
nucleo_GD <- c()
for(i in 1:50){
nucleo_GD[i] <- gdiversity(final_frame[,i],frequency)  }
nucleo_GD #null
dev.off()
render("Assignment08_SophieYeonSooKim.Rmd")
render("Assignment08_SophieYeonSooKim.Rmd")
render("Assignment08_SophieYeonSooKim.Rmd")
render("Assignment08_SophieYeonSooKim.Rmd")
